from typing import List, Any
import pythonosc
from pythonosc import dispatcher
from pythonosc import osc_server
from pythonosc import udp_client
import autocoderlib as ac
import sys, os
import socket
import numpy as np
import random


import time
#vae, encoder, decoder = 0, 0, 0
#order = 0
#minin, maxin, scale_mult, scale_subtract, input_dim, intermediate_dim, encoded_dim = 0, 0, 0, 0, 0, 0, 0
#windowskip = 1024
color = ac.color

if(sys.argv[1] == '-help' or sys.argv[1] == '-h'):
    print()
    print("       python3 ./autocoder_remote.py -o outport inport")
    print()
    print("      "+color.CYAN+"/sanity/check"+color.END)
    print("           returns "+color.CYAN+"/sanity"+color.END+" checked")
    print()
    print("       "+color.CYAN+"/quit"+color.END)
    print()
    print("       "+color.CYAN+"/load"+color.END+" "+color.GREEN+"input_file.wav"+color.END)
    print("           loads an h5 model.")
    print()
    print("       "+color.CYAN+"/load/encoder"+color.END+" "+color.GREEN+"input_file.wav"+color.END)
    print("           loads a tflite encoder model.")
    print()
    print("       "+color.CYAN+"/load/decoder"+color.END)
    print("           loads a tflite decoder model.")
    print()
    print("       "+color.CYAN+"/decode"+color.END+" args[n] (an encoded frame)")
    print("           returns: "+color.CYAN+"/decoded"+color.END+" args[n] (a decoded frame)")
    print()
    print("       "+color.CYAN+"/encode"+color.END+" args[n] (an encoded frame)")
    print("           returns: "+color.CYAN+"/encoded"+color.END+" args[n] (an encoded frame)")
    print()
    print("       "+color.CYAN+"/distance/load"+color.END+" "+color.GREEN+"input_file.wav"+color.END)
    print("           loads an order file created with python3 /autocoder_analyze.py -encode")
    print("           and python3 ./autocoder_analyze.py -distance")
    print()
    print("       "+color.CYAN+"/distance/windowskip windowskip"+color.END)
    print("           sets the windowskip multiplier for distance calculations")
    print()
    print("       "+color.CYAN+"/distance/get_index"+color.END+" start n p")
    print("           returns: "+color.CYAN+"/distance/frame_index"+color.END+" index")
    print("                    "+color.CYAN+"/distance/sample_index"+color.END+" index (index * windowskip)")
    print()
    print("           Returns both the window index and the sample index of a random")
    print("           frame from a pool of n similar candidates. Power weights the ")
    print("           probability either closer (p > 1.) or further (p < 1.) away ")
    print("           from the start point along the similarity metric axis.")
    print()
    print("       For simplicity, input_file.wav is treated as an anchor to load")
    print("       various other files generated by the other functions.")
    print()
    exit()


oscinport = int(sys.argv[1])
oscoutport = int(sys.argv[2])

def sanity_check(arg1):
    print("")
    print("   ... everything is ok ...")
    print("   ...", socket.gethostbyname(socket.gethostname()), "...")
    print("   ... port in:", oscoutport, "...")
    print("   ... port out:", oscinport, "...")
    print("")
    client.send_message("/sanity", "checked")

def exit_script(arg1):
    os._exit(os.EX_OK)

def load_osc(arg1, arg2):
    global vae, encoder, decoder
    global deep
    global scale_mult
    global scale_subtract

    minin, maxin, scale_mult, scale_subtract, input_dim, intermediate_dim, encoded_dim, deep = ac.read_mm(arg2)

    if(deep == 0):
        vae, encoder, decoder =  ac.init_autoencoder_shallow(input_dim, intermediate_dim, encoded_dim, .0001)
    else:
        vae, encoder, decoder =  ac.init_autoencoder_deep(input_dim, intermediate_dim, encoded_dim, .0001)

    vae, encoder, decoder = ac.load(arg2, vae, encoder, decoder)

def load_osc_encoder(arg1, arg2):
    global encoder
    global deep
    global scale_mult
    global scale_subtract
    global input_dim

    minin, maxin, scale_mult, scale_subtract, input_dim, intermediate_dim, encoded_dim, deep = ac.read_mm(arg2)
    encoder, input_details, output_details = ac.load_lite(arg2, "encoder")
    print("   ... loaded encoder ...")

def load_osc_decoder(arg1, arg2):
    global decoder
    global deep
    global scale_mult
    global scale_subtract
    global encoded_dim

    minin, maxin, scale_mult, scale_subtract, input_dim, intermediate_dim, encoded_dim, deep = ac.read_mm(arg2)
    decoder, input_details, output_details = ac.load_lite(arg2, "decoder")
    print("   ... loaded decoder ...")

def get_decoded(*args: List[Any]):
    global decoder
    global deep
    global scale_mult
    global scale_subtract
    global encoded_dim
    in_vect = np.zeros(encoded_dim)
    for i in range (len(args) - 1):
        in_vect[i] = args[i + 1]
    client.send_message("/decoded", ac.decode(decoder, deep, scale_mult, scale_subtract, [in_vect]).tolist())

def get_encoded(*args: List[Any]):
    global encoder
    global deep
    global scale_mult
    global scale_subtract
    global input_dim

    in_vect = np.zeros(input_dim)
    for i in range (len(args) - 1):
        in_vect[i] = args[i + 1]

    client.send_message("/encoded", ac.encode(encoder, deep, scale_mult, scale_subtract, in_vect).tolist())

def load_distances(arg1, arg2):
    global order
    order = np.load(arg2 + ".ord.npy")
    print("   ... loaded distances ...")

def set_distance_windowskip(arg1, arg2):
    global windowskip
    windowskip = arg2

def get_distance(arg1, index_, n_, pow_):
    global order
    global windowskip
    index_ = order[index_, int(pow(random.random(), pow_) * n_)]
    client.send_message("/distance/frame_index", int(index_))
    client.send_message("/distance/sample_index", int(index_ * windowskip)) #  HARDCODED TO  THE TRAINING VALUE

def get_distances(arg1, index_):
    global order
    global windowskip
    index_ = order[index_,]
    client.send_message("/distance/indexes", index_.tolist())

def set_deep(arg1, arg2):
    global deep
    deep = arg2


client, server = 0, 0

def start_osc():
    global dispatcher
    global client
    global server

    client = udp_client.SimpleUDPClient("127.0.0.1", oscinport)

    dispatcher = dispatcher.Dispatcher()
    dispatcher.map("/sanity/check", sanity_check)
    dispatcher.map("/quit", exit_script)
    dispatcher.map("/load", load_osc)
    dispatcher.map("/load/encoder", load_osc_encoder)
    dispatcher.map("/load/decoder", load_osc_decoder)
    dispatcher.map("/decode", get_decoded)
    dispatcher.map("/encode", get_encoded)
    dispatcher.map("/load/distance", load_distances)
    dispatcher.map("/distance/get_index", get_distance)
    dispatcher.map("/distance/get_indexes", get_distances)
    dispatcher.map("/distance/windowskip", set_distance_windowskip)
    dispatcher.map("/deep", set_deep)

    print("***********************************")
    print("* OPENING CONNECTION ON PORTS " + str(oscoutport) + " " + str(oscinport) + " *")
    print("***********************************")
    print("")

    server = osc_server.ThreadingOSCUDPServer(
          ("127.0.0.1", oscoutport), dispatcher)
    print("Serving on {}".format(server.server_address))
    print("")
    server.serve_forever()

start_osc()
